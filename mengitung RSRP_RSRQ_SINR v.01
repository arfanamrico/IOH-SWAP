import pandas as pd
import glob
import os
import win32com.client    

####=================================
Excel = win32com.client.Dispatch("Excel.Application")
wb = Excel.Workbooks.Open(r"C:\Users\Lenovo\Documents\template\DT_SSA_Cap_Thmp_test.xlsx")
Excel.visible = True
# #penamaan sheet
# sh_2g =wb.Worksheets("DT 2G 1")
sh_4g =wb.Worksheets("DT 4G 2")
# sh_ho =wb.Worksheets("DT HO Mobility")

# Path folder tempat file CSV
folder_path = r"C:\Users\Lenovo\Documents\SSA\12JKS0277\export\4G"   # ganti sesuai folder kamu
all_files = glob.glob(os.path.join(folder_path, "*.csv"))

# Definisikan bin dan label untuk RSRP
bins_rsrp = [-145, -115, -105, -95, -80, -30]
labels_rsrp = ["-145 to -115", "-115 to -105", "-105 to -95", "-95 to -85", "-85 to -30"]
# Definisikan bin dan label untuk RSRQ
bins_rsrq = [-40, -16, -14, -12, -10, 0]
labels_rsrq = ["-40 to -16", "-16 to -14", "-14 to -12", "-12 to -10", "-10 to 0"]
# Definisikan bin dan label untuk SINR
bins_sinr = [-20, -5, 0, 3, 10, 20, 50]
labels_sinr = ["-20 to -5", "-5 to 0", "0 to 3", "3 to 10", "10 to 20", "20 to 50"]

# DataFrame untuk menampung hasil gabungan samping
summary_rsrp = pd.DataFrame(index=labels_rsrp)
summary_sinr = pd.DataFrame(index=labels_sinr)
summary_rsrq = pd.DataFrame(index=labels_rsrq)

for file in all_files:
    df = pd.read_csv(file)
    
    # ----------------- RSRP -----------------
    if 'LTE PCC Serving RSRP(dBm)' in df.columns:
        df['LTE PCC Serving RSRP(dBm)'] = pd.to_numeric(df['LTE PCC Serving RSRP(dBm)'], errors='coerce')
        df['rsrp_range'] = pd.cut(df['LTE PCC Serving RSRP(dBm)'], bins=bins_rsrp, labels=labels_rsrp, right=True)
        count_rsrp = df['rsrp_range'].value_counts().sort_index()
    else:
        count_rsrp = pd.Series([0]*len(labels_rsrp), index=labels_rsrp)
    
    # ----------------- RSRQ ------------------
    if 'LTE PCC Serving RSRQ(dB)' in df.columns:
        df['LTE PCC Serving RSRQ(dB)'] = pd.to_numeric(df['LTE PCC Serving RSRQ(dB)'], errors='coerce')
        df['rsrq_range'] = pd.cut(df['LTE PCC Serving RSRQ(dB)'], bins=bins_rsrq, labels=labels_rsrq, right=True)
        count_rsrq = df['rsrq_range'].value_counts().sort_index()
    else:
        count_rsrq = pd.Series([0]*len(labels_rsrq), index=labels_rsrq)
    
    # ----------------- SINR ------------------
    if 'LTE PCC Serving SINR(dB)' in df.columns:
        df['LTE PCC Serving SINR(dB)'] = pd.to_numeric(df['LTE PCC Serving SINR(dB)'], errors='coerce')
        df['sinr_range'] = pd.cut(df['LTE PCC Serving SINR(dB)'], bins=bins_sinr, labels=labels_sinr, right=True, include_lowest=True)
        count_sinr = df['sinr_range'].value_counts().sort_index()
    else:
        count_sinr = pd.Series([0]*len(labels_sinr), index=labels_sinr)

    # Ambil nama kolom dari setelah underscore kedua
    filename = os.path.basename(file)
    parts = filename.split("_")
    if len(parts) >= 3:
        col_name = parts[2].split(".")[0]  # buang ekstensi .csv
    else:
        col_name = filename  # fallback
    
    # Tambahkan ke summary masing-masing
    summary_rsrp[col_name] = count_rsrp
    summary_rsrq[col_name] = count_rsrq
    summary_sinr[col_name] = count_sinr

# Tambahkan kolom total
# summary_rsrp["Total"] = summary_rsrp.sum(axis=1)
# summary_rxqual["Total"] = summary_rxqual.sum(axis=1)

# Simpan ke Excel dengan 4 sheet
# with pd.ExcelWriter("rx_summary_wide.xlsx") as writer:
#     summary_rsrp.to_excel(writer, sheet_name="rsrpsummary_rsrp")
#     summary_rxqual.to_excel(writer, sheet_name="RxQual")

# print("Selesai! Hasil disimpan di rx_summary_wide.xlsx")
print(summary_rsrp)
print(summary_rsrq)
print(summary_sinr)

colrsrp = summary_rsrp.columns
colrsrq = summary_rsrq.columns
colsinr = summary_sinr.columns
# print(summary_df[nacol[4]][4])
#mengisi table rsrpsummary_rsrp
sh_4g.cells(42,4).value,sh_4g.cells(43,4).value,sh_4g.cells(44,4).value,sh_4g.cells(45,4).value,sh_4g.cells(46,4).value = summary_rsrp[colrsrp[0]][4],summary_rsrp[colrsrp[0]][3],summary_rsrp[colrsrp[0]][2],summary_rsrp[colrsrp[0]][1],summary_rsrp[colrsrp[0]][0]
sh_4g.cells(90,4).value,sh_4g.cells(91,4).value,sh_4g.cells(92,4).value,sh_4g.cells(93,4).value,sh_4g.cells(94,4).value = summary_rsrp[colrsrp[1]][4],summary_rsrp[colrsrp[1]][3],summary_rsrp[colrsrp[1]][2],summary_rsrp[colrsrp[1]][1],summary_rsrp[colrsrp[1]][0]
sh_4g.cells(139,4).value,sh_4g.cells(140,4).value,sh_4g.cells(141,4).value,sh_4g.cells(142,4).value,sh_4g.cells(143,4).value = summary_rsrp[colrsrp[2]][4],summary_rsrp[colrsrp[2]][3],summary_rsrp[colrsrp[2]][2],summary_rsrp[colrsrp[2]][1],summary_rsrp[colrsrp[2]][0]
sh_4g.cells(187,4).value,sh_4g.cells(188,4).value,sh_4g.cells(189,4).value,sh_4g.cells(190,4).value,sh_4g.cells(191,4).value = summary_rsrp[colrsrp[3]][4],summary_rsrp[colrsrp[3]][3],summary_rsrp[colrsrp[3]][2],summary_rsrp[colrsrp[3]][1],summary_rsrp[colrsrp[3]][0]
sh_4g.cells(235,4).value,sh_4g.cells(236,4).value,sh_4g.cells(237,4).value,sh_4g.cells(238,4).value,sh_4g.cells(239,4).value = summary_rsrp[colrsrp[4]][4],summary_rsrp[colrsrp[4]][3],summary_rsrp[colrsrp[4]][2],summary_rsrp[colrsrp[4]][1],summary_rsrp[colrsrp[4]][0]
sh_4g.cells(283,4).value,sh_4g.cells(284,4).value,sh_4g.cells(285,4).value,sh_4g.cells(286,4).value,sh_4g.cells(287,4).value = summary_rsrp[colrsrp[5]][4],summary_rsrp[colrsrp[5]][3],summary_rsrp[colrsrp[5]][2],summary_rsrp[colrsrp[5]][1],summary_rsrp[colrsrp[5]][0]

sh_4g.cells(42,15).value,sh_4g.cells(43,15).value,sh_4g.cells(44,15).value,sh_4g.cells(45,15).value,sh_4g.cells(46,15).value,sh_4g.cells(47,15).value = summary_sinr[colsinr[0]][5],summary_sinr[colsinr[0]][4],summary_sinr[colsinr[0]][3],summary_sinr[colsinr[0]][2],summary_sinr[colsinr[0]][1],summary_sinr[colsinr[0]][0]
sh_4g.cells(90,15).value,sh_4g.cells(91,15).value,sh_4g.cells(92,15).value,sh_4g.cells(93,15).value,sh_4g.cells(94,15).value,sh_4g.cells(95,15).value = summary_sinr[colsinr[1]][5],summary_sinr[colsinr[1]][4],summary_sinr[colsinr[1]][3],summary_sinr[colsinr[1]][2],summary_sinr[colsinr[1]][1],summary_sinr[colsinr[1]][0]
sh_4g.cells(139,15).value,sh_4g.cells(140,15).value,sh_4g.cells(141,15).value,sh_4g.cells(142,15).value,sh_4g.cells(143,15).value,sh_4g.cells(144,15).value = summary_sinr[colsinr[2]][5],summary_sinr[colsinr[2]][4],summary_sinr[colsinr[2]][3],summary_sinr[colsinr[2]][2],summary_sinr[colsinr[2]][1],summary_sinr[colsinr[2]][0]
sh_4g.cells(187,15).value,sh_4g.cells(188,15).value,sh_4g.cells(189,15).value,sh_4g.cells(190,15).value,sh_4g.cells(191,15).value,sh_4g.cells(192,15).value = summary_sinr[colsinr[3]][5],summary_sinr[colsinr[3]][4],summary_sinr[colsinr[3]][3],summary_sinr[colsinr[3]][2],summary_sinr[colsinr[3]][1],summary_sinr[colsinr[3]][0]
sh_4g.cells(235,15).value,sh_4g.cells(236,15).value,sh_4g.cells(237,15).value,sh_4g.cells(238,15).value,sh_4g.cells(239,15).value,sh_4g.cells(240,15).value = summary_sinr[colsinr[4]][5],summary_sinr[colsinr[4]][4],summary_sinr[colsinr[4]][3],summary_sinr[colsinr[4]][2],summary_sinr[colsinr[4]][1],summary_sinr[colsinr[4]][0]
sh_4g.cells(283,15).value,sh_4g.cells(284,15).value,sh_4g.cells(285,15).value,sh_4g.cells(286,15).value,sh_4g.cells(287,15).value,sh_4g.cells(288,15).value = summary_sinr[colsinr[5]][5],summary_sinr[colsinr[5]][4],summary_sinr[colsinr[5]][3],summary_sinr[colsinr[5]][2],summary_sinr[colsinr[5]][1],summary_sinr[colsinr[5]][0]

sh_4g.cells(42,26).value,sh_4g.cells(43,26).value,sh_4g.cells(44,26).value,sh_4g.cells(45,26).value,sh_4g.cells(46,26).value = summary_rsrq[colrsrq[0]][4],summary_rsrq[colrsrq[0]][3],summary_rsrq[colrsrq[0]][2],summary_rsrq[colrsrq[0]][1],summary_rsrq[colrsrq[0]][0]
sh_4g.cells(90,26).value,sh_4g.cells(91,26).value,sh_4g.cells(92,26).value,sh_4g.cells(93,26).value,sh_4g.cells(94,26).value = summary_rsrq[colrsrq[1]][4],summary_rsrq[colrsrq[1]][3],summary_rsrq[colrsrq[1]][2],summary_rsrq[colrsrq[1]][1],summary_rsrq[colrsrq[1]][0]
sh_4g.cells(139,26).value,sh_4g.cells(140,26).value,sh_4g.cells(141,26).value,sh_4g.cells(142,26).value,sh_4g.cells(143,26).value = summary_rsrq[colrsrq[2]][4],summary_rsrq[colrsrq[2]][3],summary_rsrq[colrsrq[2]][2],summary_rsrq[colrsrq[2]][1],summary_rsrq[colrsrq[2]][0]
sh_4g.cells(187,26).value,sh_4g.cells(188,26).value,sh_4g.cells(189,26).value,sh_4g.cells(190,26).value,sh_4g.cells(191,26).value = summary_rsrq[colrsrq[3]][4],summary_rsrq[colrsrq[3]][3],summary_rsrq[colrsrq[3]][2],summary_rsrq[colrsrq[3]][1],summary_rsrq[colrsrq[3]][0]
sh_4g.cells(235,26).value,sh_4g.cells(236,26).value,sh_4g.cells(237,26).value,sh_4g.cells(238,26).value,sh_4g.cells(239,26).value = summary_rsrq[colrsrq[4]][4],summary_rsrq[colrsrq[4]][3],summary_rsrq[colrsrq[4]][2],summary_rsrq[colrsrq[4]][1],summary_rsrq[colrsrq[4]][0]
sh_4g.cells(283,26).value,sh_4g.cells(284,26).value,sh_4g.cells(285,26).value,sh_4g.cells(286,26).value,sh_4g.cells(287,26).value = summary_rsrq[colrsrq[5]][4],summary_rsrq[colrsrq[5]][3],summary_rsrq[colrsrq[5]][2],summary_rsrq[colrsrq[5]][1],summary_rsrq[colrsrq[5]][0]
